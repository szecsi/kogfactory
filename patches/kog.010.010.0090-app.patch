From 82f0279bbf3b0e927c7e0e3b339b1fa893f875ff Mon Sep 17 00:00:00 2001
From: szecsi <szecsi.laszlo@gmail.com>
Date: Tue, 2 Feb 2021 15:41:22 +0100
Subject: [PATCH] app

---
 client/src/main/content/kotlin/App.kt | 66 +++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)
 create mode 100644 client/src/main/content/kotlin/App.kt

diff --git a/client/src/main/content/kotlin/App.kt b/client/src/main/content/kotlin/App.kt
new file mode 100644
index 0000000..3578187
--- /dev/null
+++ b/client/src/main/content/kotlin/App.kt
@@ -0,0 +1,66 @@
+import kotlin.browser.document
+import kotlin.browser.window
+import org.w3c.dom.HTMLDivElement
+import org.w3c.dom.HTMLCanvasElement
+import org.w3c.dom.events.*
+import org.w3c.dom.Window
+
+class App(val canvas : HTMLCanvasElement, val overlay : HTMLDivElement) {
+  
+
+  @Suppress("UNUSED_PARAMETER")
+  fun registerEventHandlers() {
+    document.onkeydown =  { //$ locally defined function
+      event : KeyboardEvent ->
+      event //$ implement own logic here
+    }
+
+    document.onkeyup = { 
+      event : KeyboardEvent ->
+      event
+    }
+
+    canvas.onmousedown = { 
+      event : MouseEvent ->
+      // event.x.toInt()
+      // event.y.toInt()
+      event
+    }
+
+    canvas.onmousemove = { 
+      event : Event ->
+      event.stopPropagation()
+    }
+
+    canvas.onmouseup = { 
+      event : Event ->
+      event // This line is a placeholder for event handling code. It has no effect, but avoids the "unused parameter" warning.
+    }
+
+    canvas.onmouseout = { 
+      event : Event ->
+      event // This line is a placeholder for event handling code. It has no effect, but avoids the "unused parameter" warning.
+    }
+
+    window.requestAnimationFrame {//$ trigger rendering
+      update()//$ this method is responsible; for drawing a frame
+    }
+  }  
+
+  fun update() {
+    window.requestAnimationFrame { update() }
+  }
+}
+
+fun main() {
+  val canvas = document.getElementById("canvas") as HTMLCanvasElement
+  val overlay = document.getElementById("overlay") as HTMLDivElement
+  overlay.innerHTML = """<font color="red">WebGL</font>"""
+
+  try{
+    val app = App(canvas, overlay)//$ from this point on,; this object is responsible; for handling everything
+    app.registerEventHandlers()//$ we implement this; to make sure the app; known when there is; something to do
+  } catch(e : Error) {
+    console.error(e.message)
+  }
+}
\ No newline at end of file
-- 
2.28.0.windows.1

